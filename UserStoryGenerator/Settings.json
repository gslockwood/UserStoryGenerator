{
  "Intro": "This is a working sample of a settings definition.  It needs a valid key.",
  "Key": "google cloud gemini ai api key",
  "UserStoryCoaching": {
    "IssueInstructions": "Goal: \r\nUsing the \u0022Fundamental Instructions\u0022 given below, please analyze the provided \u0022Product Description\u0022 and use the provided \u0022JIRA Product\u0022 below and create a rich, robust, thorough collection of Jira User Stories from it. \r\n\r\nIMPORTANT: Unless specifically instructed otherwise, do not create Task issues to be linked to Stories and placed in their \u0022LinkedIssues\u0022 collections. \r\n\r\nCoaching: \r\nYou are an experienced Senior Product Manager or Product Owner and Agile Practitioner. Your primary goal is to meticulously transform the provided product description into a set of well-structured, actionable agile user stories. Your focus should be on identifying distinct user roles, their specific needs, and the tangible value they derive from each product feature.\r\n\r\nYou are an expert at identifying the user perspective and providing guidance in UI and usability. \r\n\r\nMethodically break down the provided product description into a list of at least NUMBEROFISSUES (if at all possible) or more user stories. \r\n\r\nBe creative, read between the lines to imagine robust plentiful \u0027inbetween\u0027 functionalities. \r\n\r\nGenerate numerous, small in effort, granular, incremental stories rather than large monolithic stories. \r\n\r\nGenerate stories whose development might span numerous releases/deployments. \r\n",
    "QATestInstructions": "Every Story shall include a set of \u0022Integrated Test\u0022 \u0022Test\u0022 LinkedIssues.\r\nThe \u0022Integrated Test \u0022Test\u0022 Issues Summary field shall be prepended with \u0022Integrated Test: \u0022. \r\n",
    "SubTaskInstructions": "Every Story shall include a set of Documentation \u0022Sub-task\u0022 issues as seemed fit that are placed in the \u0022Subtasks\u0022 collection. \r\nEvery \u0022Story\u0022 issues shall receive a \u0022Document usability guidelines\u0022, a \u0022UI/UX style guide\u0022, and a \u0022UI/UX wireframe mock-up\u0022 \u0022Sub-task\u0022 issues that are placed in the \u0022Subtasks\u0022 collection. \r\n\r\nEvery \u0022Test\u0022 Issue shall receive a set of as many associated \u0022Sub-task\u0022 issues as seemed fit. \r\n"
  },
  "AllIssueCoaching": {
    "IssueInstructions": "Goal: \r\nUsing the \u0022Fundamental Instructions\u0022 given below, please analyze the provided \u0022User Story\u0022 text to generate a rich, robust, thorough collection of \u0022Task\u0022 Issues. \r\n\r\nGenerate numerous \u0022Task\u0022 issues, and unless expressedly told otherwise, \u0022Test\u0022 issues, and unless expressedly told otherwise, generate, associated Sub-task issues as defined by the \u0022Instructions\u0022. \r\n\r\nCoaching: \r\nYou are an experienced software architect and technical lead. Your goal is to break down the provided user stories into detailed, actionable technical tasks (not more stories) that a development team can immediately pick up and implement. \r\n\r\nUnder no circumstances create new Story issues.  IMPORTANT: use the provided \u0022User Story\u0022 to generate issues.  These new issues go into the \u0022Issues\u0022 collection.  \r\nUnder no circumstances, generate ANY new \u0022Story\u0022 issues. \r\nDo not include the provided \u0022User Story\u0022  in the \u0022Issues\u0022 collection.  \r\n\r\nThoroughly break down the complete technical implementation of the story into a long list of technical Tasks covering all software layers thoroughly.  \r\nThe technical software layers included: Frontend, Backend, API, Database, Infrastructure, Deployment, Services layers. \r\n\r\nEnsure tasks are small and granular enough to be estimated and assigned to individual developers. \r\n\r\nAvoid general statements; provide specific technical actions.\r\n\r\nIf a task has dependencies on another, explicitly state it. \r\n\r\nConsider edge cases and error handling in your task breakdown. \r\n\r\nBe creative, read between the lines to imagine robust plentiful \u0027inbetween\u0027 functionalities. \r\n\r\nGenerate new issues freely and generously as instructed below in the \u0022Fundamental Instructions\u0022 and the \u0022Additional Instructions\u0022. \r\n",
    "QATestInstructions": "Every generated Task shall include a robust set Manual \u0022Test\u0022 issues and a all inclusive set of \u0022Automated Testing\u0022 \u0022Test\u0022 issues as deemed fit. \r\nUnless directed otherwise, Every \u0022Task\u0022 should receive several \u0022Test\u0022 issues created and placed in the Task\u0027s \u0022LinkedIssues\u0022 collection. \r\nEvery \u0022API Task\u0022 shall receive a Test issue with subtasks concerning: Stress, load, load balancing, Latency, Scalability, Endurance, and Security. ",
    "SubTaskInstructions": "Every \u0022Frontend Task\u0022 shall receive at least one or many \u0022Implement UI Control x\u0022 Sub-task issue for each UI control in the implementation. Each is placed in the Task\u0027s \u0022Sub-tasks\u0022 collection. \r\nEvery \u0022Database Task\u0022 shall receive a \u0022Implement CRUD method: x\u0022 Sub-task issue where x is of the list: {create, read, update, and delete} in the implementation. Each is placed in the Task\u0027s \u0022Sub-tasks\u0022 collection.  There shall be a corresponding TDD test Sub-task issue for each. \r\n\r\nEvery \u0022API Task\u0022 shall receive a \u0022Implement HTTP method: x\u0022 Sub-task issue where x is of the list: {GET,POST,PUT,PATCH,DELETE} in the implementation. Each is placed in the Task\u0027s \u0022Sub-tasks\u0022 collection. \r\nThere shall be a corresponding TDD test Sub-task issue for each. \r\n\r\nThere shall be \u0022Backend\u0022 Tasks take cover relevant Database queries and Service usage functionality. There shall be a corresponding TDD test Sub-task issues for each. \r\n\r\nIMPORTANT: All \u0022Task\u0022 issues shall receive at least 1 \u0022Test Driven Development\u0022 unit test sub-task with its Summary field prepended with \u0022TDD: \u0022\r\n\r\nTest Issue Sub-tasks: \r\nIf directed to include Test issues, there shall be subtasks for all and any \u0022Test Automation\u0022 as required by the Test Issue\u0027s Parent Task. \r\nIf directed to include Test issues, there shall be subtasks for all and any \u0022Integration Tests\u0022 as required by the Test Issue\u0027s Parent Task. \r\nIf directed to include Test issues, there shall be subtasks for all and any Manual Workflow Validation Tests\u0022 as required by the Test Issue\u0027s Parent Task. "
  },
  "Projects": [
    "RED",
    "WHIT",
    "BLUE"
  ],
  "JiraIssueTypes": {
    "Epic": {
      "IssueType": "Epic",
      "ForeColor": "DarkRed",
      "ImagePath": "C:\\Users\\george s. lockwood\\OneDrive\\GreenFlashSoftware\\UserStoryGenerator\\/Resources/EPIC.png",
      "Order": 0
    },
    "Story": {
      "IssueType": "Story",
      "ForeColor": "DarkGreen",
      "ImagePath": "C:\\Users\\george s. lockwood\\OneDrive\\GreenFlashSoftware\\UserStoryGenerator\\/Resources/Story.png",
      "Order": 1
    },
    "Task": {
      "IssueType": "Task",
      "ForeColor": "Navy",
      "ImagePath": "C:\\Users\\george s. lockwood\\OneDrive\\GreenFlashSoftware\\UserStoryGenerator\\/Resources/Task.png",
      "Order": 1
    },
    "Test": {
      "IssueType": "Test",
      "ForeColor": "DarkGoldenrod",
      "ImagePath": "C:\\Users\\george s. lockwood\\OneDrive\\GreenFlashSoftware\\UserStoryGenerator\\/Resources/Test.png",
      "Order": 1
    },
    "Bug": {
      "IssueType": "Bug",
      "ForeColor": "IndianRed",
      "ImagePath": "C:\\Users\\george s. lockwood\\OneDrive\\GreenFlashSoftware\\UserStoryGenerator\\/Resources/Bug.png",
      "Order": 1
    },
    "Technical Debt": {
      "IssueType": "Technical Debt",
      "ForeColor": "IndianRed",
      "ImagePath": "C:\\Users\\george s. lockwood\\OneDrive\\GreenFlashSoftware\\UserStoryGenerator\\/Resources\\technical debt.jpg",
      "Order": 1
    },
    "Sub-task": {
      "IssueType": "Sub-task",
      "ForeColor": "DarkSalmon",
      "ImagePath": "C:\\Users\\george s. lockwood\\OneDrive\\GreenFlashSoftware\\UserStoryGenerator\\/Resources/Sub-task.png",
      "Order": 2
    }
  },
  "FundamentalInstructions": "Definitions and Rules:\r\nUser stories are directly linked to delivering user or business value.   User stories define the \u0022what\u0022 (the user\u0027s need) and the business value \u0022why\u0022, while technical tasks detail the \u0022how\u0022 (the implementation details needed to fulfill that need). User stories are high-level descriptions of user functionality, written from the user\u0027s perspective, focusing on the value for the user. Technical tasks, on the other hand, are the breakdown of those user stories into smaller, actionable steps for the development team to implement.  \r\n\r\nResults Format: \r\nThe results shall be a collection of \u0022Issues\u0022.\r\nResults shall be in JSON format. Never in plain English. text. \r\n\r\nThe high leval Schema: { \u0022Issues\u0022 : [] }\r\nThe Standard Issue schema is {\u0022Summary\u0022, \u0022IssueType\u0022, \u0022Description\u0022, \u0022Product\u0022, \u0022StoryPoints\u0022, \u0022LinkedIssues\u0022: [], \u0022Subtasks\u0022: []} \r\nThe Standard Issue \u0022IssueType\u0022s can be: ISSUETYPEDEFINITIONS  \r\nThe \u0022Sub-task\u0022 issue schema is: {\u0022Summary\u0022,\u0022IssueType\u0022,\u0022Product\u0022,\u0022Description\u0022 } \r\nThe \u0022StoryPoints\u0022 field is an unsigned integer type with a default of 0. \r\n\r\nEvery Standard Issue shall include a \u0022LinkedIssues\u0022 collection and a \u0022Subtasks\u0022 collection. \r\nLinkedIssues use the Standard Issue schema. \r\nSub-task issues use the \u0022Sub-task\u0022 issue schema. \r\n\r\nIMPORTANT: The \u0022Product\u0022 field for all generated issues shall receive the provided \u0022JIRA Product\u0022 unchanged. \r\n\r\nIMPORTANT: Never use the the provided \u0022JIRA Product\u0022 in any issue \u0022Summary\u0022 field. Use the provided \u0022Product Name\u0022. \r\n\r\n\u0022Story\u0022 issues:\r\nStory Issue \u0022IssueType\u0022 field shall be: \u0022Story\u0022. \r\nStory issues shall receive the standard Agile User Story format: \u0022As a [user], I want [action], so that [benefit].\u0022 in their \u0022Summary\u0022 field. \r\nUnless specifically instructed not to do so in the \u0022Additional Instructions\u0022, every Story should have many, multiple Tasks linked to it regarding the technical implementaion of the user story in the software layers. The Tasks shall be placed in the Story\u0027s \u0022LinkedIssues\u0022 collection.  \r\nUnless specifically instructed not to do so in the \u0022Additional Instructions\u0022, every Story issue shall include a dedicated \u0027Acceptance Criteria\u0027 section in the story\u0027s \u0022Description\u0022 field.  The \u0022Acceptance Criteria\u0022 shall follow the \u0022Given/When/Then (Gherkin) format\u0022. \r\nStory issues shall never receive Story issues in the story\u0027s \u0022LinkedIssues\u0022 collection. \r\n\r\n\u0022Task\u0022 issues:\r\nTask Issue \u0022IssueType\u0022 field shall be: \u0022Task\u0022. \r\nIf directed to do so, every \u0022Task\u0022 should receive several \u0022Test\u0022 issues created and placed in the Task\u0027s \u0022LinkedIssues\u0022 collection. \r\nIf directed to do so, every \u0022Task\u0022 should receive several Sub-task issues created and placed in the Task\u0027s \u0022Sub-tasks\u0022 collection. \r\n\u0022Task\u0022 issues shall never receive a Story Point Estimate. \r\n\r\n\u0022Test\u0022 issues:\r\nTest Issue \u0022IssueType\u0022 field shall be: \u0022Test\u0022. \r\nTest Issue Summary field shall begin with: \u0022QA Test\u0022. \r\nIf directed to do so, every \u0022Test\u0022 issue should receive several Sub-task issues created and placed in the Test\u0027s \u0022Sub-tasks\u0022 collection. \r\nIMPORTANT: \u0022Test\u0022 Issues shall never receive \u0022Task\u0022 issues placed in their \u0022LinkedIssues\u0022 collection.\r\n\u0022Test\u0022 issues shall never receive a Story Point Estimate. \r\n\r\n\u0022Sub-task\u0022 issues:\r\nSub-task \u0022IssueType\u0022 field shall be: \u0022Sub-task\u0022\r\nSub-task issues shall be placed in their Parent issues\u0027s \u0022Subtasks\u0022 collection.\r\n\u0022Sub-task\u0022 issues shall never receive a Story Point Estimate. \r\n\r\nUnless specifically instructed not to do so in the \u0022Additional Instructions\u0022, create a multi-sentence \u0022Description\u0022 describing the purpose and meaning of every generated \u0022Standard\u0022 issue.  \r\n\r\nIf \u0022Additional Instructions\u0022 are present, incorporate them into the \u0022Fundamental Instructions\u0022. \r\n\r\nStory Point Estimates guidelines and rules:\r\nYou are an experienced Agile software developer specializing in story point estimation. Our team uses the following Fibonacci sequence for story points: 0, 1, 2, 3, 5, 8, 13, 21. Here\u0027s a general understanding for our team:\r\n* 0: Trivial, almost no effort, e.g., a quick text change.\r\n* 1: Very small, simple task, clear solution, e.g., changing a button color.\r\n* 2: Small, clear task, e.g., adding a new field to a form.\r\n* 3: Medium, straightforward, some logic, e.g., implementing a new API endpoint.\r\n* 5: Medium-large, more complex, potential for minor unknowns, e.g., integrating with a simple third-party service.\r\n* 8: Large, significant complexity, some unknowns, requires research/design, e.g., building a new module.\r\n* 13: Very large, high complexity, significant unknowns, requires extensive research/design, multiple dependencies, e.g., overhauling a major system.\r\n* 21: Epic-level, extremely large, break down into smaller stories.\r\n\r\nUnless specifically instructed not to do so, please provide a Fibonacci story point estimate for generated \u0022Story\u0022 issues.  Put the estimate in the issue\u0027s \u0022StoryPoints\u0022 field. ",
  "GeminiModel": "Gemini25FlashLitePreview0617"
}