using System.Text;
using UserStoryGenerator.Model;
using UserStoryGenerator.Utilities;
using static UserStoryGenerator.Model.Settings;
using static UserStoryGenerator.View.TriStateTreeView;

namespace UserStoryGenerator.View
{
    public class RecursiveWorker(Dictionary<string, JiraIssueType>? jiraIssueTypes, int descriptionImageIndex)//(Model.Model model, TriStateTreeView treeView)
    {
        readonly List<TreeNodeEx> IssuesWithSubtasksInError = [];
        readonly List<TreeNodeEx> IssuesWithLinkedIssuesInError = [];
        private const string errorMsg = "Errors of this type will cause problems if included in the import of the CSV to Jira.\n\nRegenerate isses or be sure to exclude (leave unchecked) the issues marked in red.\n\n";

        public void CreateNodes(IList<Model.Issue> issues, TreeNode node, bool allIssue = false)
        {
            if( jiraIssueTypes == null ) throw new NullReferenceException(nameof(jiraIssueTypes));

            CreateNodesInternal(issues, node, allIssue);

            if( IssuesWithSubtasksInError.Count > 0 )
            {
                StringBuilder sb = new();
                foreach( TreeNodeEx treeNodeEx in IssuesWithSubtasksInError )
                {
                    if( treeNodeEx.Summary == null ) continue;
                    if( treeNodeEx.IssueType == null ) continue;

                    int maxLength = 80;
                    if( treeNodeEx.Summary.Length < maxLength )
                        maxLength = treeNodeEx.Summary.Length;

                    sb.Append(treeNodeEx.Summary[..maxLength] + "...");
                    sb.Append(" - ");
                    sb.Append(treeNodeEx.IssueType);
                    sb.AppendLine();

                    //Color temp = treeNodeEx.BackColor;
                    treeNodeEx.BackColor = Color.Red;
                    treeNodeEx.ForeColor = Color.White;

                    TreeNodeEx parent = treeNodeEx;
                    while( parent.Level > 1 )
                        parent = (TreeNodeEx)parent.Parent;

                    parent?.ExpandAll();

                }

                MessageBox.Show(
                    $"There are {IssuesWithSubtasksInError.Count} Issues With non {JiraIssueType.Sub_task} issues in the Subtasks collection.\n\n{sb}\n\n{errorMsg}",
                    "Critical Error",
                    MessageBoxButtons.OK,//YesNo
                    MessageBoxIcon.Error);

            }
            if( IssuesWithLinkedIssuesInError.Count > 0 )
            {
                StringBuilder sb = new();
                foreach( TreeNodeEx treeNodeEx in IssuesWithLinkedIssuesInError )
                {
                    if( treeNodeEx.Summary == null ) continue;
                    if( treeNodeEx.IssueType == null ) continue;

                    int maxLength = 80;
                    if( treeNodeEx.Summary.Length < maxLength )
                        maxLength = treeNodeEx.Summary.Length;

                    sb.Append(treeNodeEx.Summary[..maxLength] + "...");
                    sb.Append(" - ");
                    sb.Append(treeNodeEx.IssueType);
                    sb.AppendLine();

                    //Color temp = treeNodeEx.BackColor;
                    treeNodeEx.BackColor = Color.Red;
                    treeNodeEx.ForeColor = Color.White;

                    TreeNodeEx parent = treeNodeEx;
                    while( parent.Level > 1 )
                        parent = (TreeNodeEx)parent.Parent;

                    parent?.ExpandAll();
                }

                MessageBox.Show($"There are {IssuesWithLinkedIssuesInError.Count} Issues With {JiraIssueType.Sub_task} issues in the LinkedIssues collection.\n\n{sb}\n\n{errorMsg}",
                    "Critical Error",
                    MessageBoxButtons.OK,//YesNo
                    MessageBoxIcon.Error);

            }
        }

        private void CreateNodesInternal(IList<Model.Issue> issues, TreeNode node, bool allIssue = false)
        {
            foreach( Model.Issue issue in issues )
            {
                if( issue.Summary == null ) continue;
                if( issue.IssueType == null ) continue;

                string toolTipText;
                if( issue.IssueType.Equals(JiraIssueType.Story) )
                    toolTipText = $"Issue Type={issue.IssueType} StoryPoints={issue.StoryPoints}";
                else
                {
                    float temp = ( issue.OriginalEstimate != null ) ? issue.OriginalEstimate.Value : 0f;
                    toolTipText = $"Issue Type={issue.IssueType} OriginalEstimate={IssueUtilities.FormatEstimateTime(temp)}";
                }

                TriStateTreeView.TreeNodeEx? issueNode = new(issue)
                {
                    ToolTipText = toolTipText,

                    // mark the issue as generated by userStory generation  (false) or 'all issue' run for a user story (true)
                    Tag = allIssue,
                };

                if( issue is TaskIssue task )
                {
                    issueNode = new TreeNodeExTask(task)
                    {
                        ToolTipText = toolTipText,
                        // mark the issue as generated by userStory generation  (false) or 'all issue' run for a user story (true)
                        Tag = allIssue,
                    };
                }


                if( issue is TestTask test )
                {
                    issueNode = new TreeNodeExTest(test)
                    {
                        ToolTipText = toolTipText,
                        // mark the issue as generated by userStory generation  (false) or 'all issue' run for a user story (true)
                        Tag = allIssue,
                    };
                }


                if( node is TreeNodeExLinkedIssues )
                {
                    if( issueNode.IssueType != null && issueNode.IssueType.Equals(JiraIssueType.Sub_task) )
                        IssuesWithLinkedIssuesInError.Add(issueNode);
                }


                if( issue.IssueType != null )
                {
                    //if( model.Settings != null && model.Settings.JiraIssueTypes != null && model.Settings.JiraIssueTypes[issue.IssueType].ForeColor != null )
                    if( jiraIssueTypes != null && jiraIssueTypes[issue.IssueType].ForeColor != null )
                    {
                        string? foreColor = jiraIssueTypes[issue.IssueType].ForeColor;
                        if( foreColor != null )
                            issueNode.ForeColor = Color.FromName(foreColor);
                    }

                    issueNode.ImageIndex = Utilities.IssueUtilities.GetImageIndex(issue.IssueType);
                }

                node.Nodes.Add(issueNode);

                if( !string.IsNullOrEmpty(issue.Description) )
                {
                    TreeNode treeNode = new(issue.Description)
                    {
                        ImageIndex = descriptionImageIndex,
                    };

                    issueNode.Nodes.Add(treeNode);
                }

                TreeNodeExSubTasks subtasksNode = new()
                {
                    ImageIndex = Utilities.IssueUtilities.GetSubTaskImageIndex()// 4
                };
                issueNode.Nodes.Add(subtasksNode);


                TreeNodeExLinkedIssues linkedIssuesNode = new()
                {
                    ImageIndex = Utilities.IssueUtilities.GetImageIndex(JiraIssueType.Task)
                };
                issueNode.Nodes.Add(linkedIssuesNode);


                if( issue.Subtasks != null )
                {
                    //List<SubTask> nonSubtaskList = issue.Subtasks.Where(issue => issue.IssueType != null && !issue.IssueType.Equals(JiraIssueType.Sub_task)).ToList();
                    //if( nonSubtaskList != null && nonSubtaskList.Count>0 )
                    //    IssuesWithSubtasksInError.Add(nonSubtaskList);

                    foreach( Model.SubTask subTask in issue.Subtasks )
                    {
                        if( subTask.IssueType == null ) throw new NullReferenceException(nameof(subTask.IssueType));

                        //if( !subTask.IssueType.Equals(JiraIssueType.Sub_task) )                        {                        }

                        TriStateTreeView.TreeNodeExSubTask exSubTask = new(subTask);
                        subtasksNode.Nodes.Add(exSubTask);

                        //if( !exSubTask.IssueType.Equals(JiraIssueType.Sub_task) )
                        //{
                        //}

                    }
                }

                if( issue.LinkedIssues != null )
                {
                    //if( issue.LinkedIssues.Where(issue => issue.IssueType != null && issue.IssueType.Equals(JiraIssueType.Sub_task)).Any() )
                    //    IssuesWithLinkedIssuesInError.Add(issueNode);


                    if( issue.LinkedIssues != null )
                        CreateNodesInternal(issue.LinkedIssues, linkedIssuesNode, allIssue);
                }
                //
            }
        }

    }

}