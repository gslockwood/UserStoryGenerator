Goal: 
Using the "Fundamental Instructions" given below, please analyze the provided "User Story" and use the provided "JIRA Product" below and create a rich, robust, thorough collection of Jira Issues from "User Story". 

If "Additional Instructions" are present, incorporate them into the "Fundamental Instructions". 

Per the provided "User Story" generate dozens of "Story", "Task", and "Test", and generate and associated ALL Sub-tasks as defined by the "Instructions".  

IMPORTANT: Don't include the provided "User Story" in the response.

Thoroughly break down the complete technical implementation of the story into a long list of technical Tasks covering all software layes thoroughly.  

The technical software layers included: Frontend, Backend, API, Database, Services layers. 

Every generated Task shall include a set Manual "Test" issues and a set of "Automated Resting" "Test" issues as seemed fit.

Every generated Story shall include a set of "Integrated Test" "Test" issues and associated "Sub-task" issues as seemed fit.

Coaching:
Be creative, read between the lines to imagine robust plentiful 'inbetween' functionalities. 
Create Tasks, Tests, sub tasks freely and generously as instructed below in the "Fundamental Instructions". 



Beginning of "Fundamental Instructions":

Results Format: 
The "Issues" collection schema is: "Issues" : [] 
The Jira Issue schema is {"Summary","IssueType","Product","Subtasks": [],"LinkedIssues": []} 
The "IssueType" are: "Story","Task","Test","Bug" 
The "Sub-task" schema is: {"Summary","IssueType","Product" } 


Defiitions and Rules:
Every Issue's "Product" field shall be defined by the provided "JIRA Product" text.
The "Product" field for all generated issues shall receive the provided "JIRA Product" unchanged. 

User stories are directly linked to delivering user or business value.   User stories define the "what" (the user's need) and "why" while technical tasks detail the business value "why" (the implementation details needed to fulfill that need). User stories are high-level descriptions of user functionality, written from the user's perspective, focusing on the value for the user. Technical tasks, on the other hand, are the breakdown of those user stories into smaller, actionable steps for the development team to implement.

IMPORTANT: Therefore: Stories should receive numerous "Task" issues that are placed in the Story's "LinkedIssues" collection. 

Overall structure: the heirarchy issue is:  Story /  x Tasks / y Tests.  Stories have many Tasks and Tasks have many Tests. 

It is rare but possible that Tasks are at the Story level.

Every Story should have many, multiple Tasks linked to it regarding the technical implementaion of the user story in the software layers;


"Sub-task" issues:
Sub-task "IssueType" field shall be: "Sub-task"
Sub-task issues shall be placed in their Parent issues's "Subtasks" collection.

"Story" issues:
Some "Story" issues can receive several "Sub-tasks" issues created and placed in the Story's "Sub-tasks" collection. 
Story issues shall have Documentation sub-tasks.
Stories can have tests in the Story's "LinkedIssues" collection as well but most Test issues are attached the Tasks. 

"Task" issues:
Task Issue "IssueType" field shall be: "Task". 
Every "Task" should receive several "Test" issues created and placed in the Task's "LinkedIssues" collection. 
Every "Task" should receive several  Sub-task issues created and placed in the Task's "Sub-tasks" collection. 

Every "Frontend Task" should receive at least one or many "Implement UI Control x" Sub-task issue for each UI control in the implementation. Each is placed in the Task's "Sub-tasks" collection. 
Every "Database Task" shall receive a "Implement CRUD method: x" Sub-task issue where x is of the list: {create, read, update, and delete} in the implementation. Each is placed in the Task's "Sub-tasks" collection.  There shall be a corresponding TDD test Sub-task issue for each. 

Every "API Task" shall receive a "Implement HTTP method: x" Sub-task issue where x is of the list: {GET,POST,PUT,PATCH,DELETE} in the implementation. Each is placed in the Task's "Sub-tasks" collection. There shall be a corresponding TDD test Sub-task issue for each. 

There shall be Backend Tasks take cover relevant Database queries and Service usage functionality. There shall be a corresponding TDD test Sub-task issues for each. 

Test issues:
Test Issue Summary field shall begin with: "QA Test". 
Test Issue "IssueType" field shall be: "Test". 
Test Issue Sub-tasks: 
Sub-tasks "IssueType" field shall be: "Sub-task". 
There shall be subtasks for all and any "Test Automation" as required by the Test Issue's Parent Task. 
There shall be subtasks for all and any "Integration Tests" as required by the Test Issue's Parent Task. 
There shall be subtasks for all and any Manual Workflow Validation Tests" as required by the Test Issue's Parent Task. 

End of "Fundamental Instructions" 